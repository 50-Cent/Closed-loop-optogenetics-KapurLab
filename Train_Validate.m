clc
clear all

% one sample P(1) = 33;
%%
traindatapath = '/home/brain_jk/Desktop/SZ_detection/SZdetection-v1/Matrix_data/TrainData';
valdatapath = '/home/brain_jk/Desktop/SZ_detection/SZdetection-v1/Matrix_data/ValData';

list_trainfile = dir(traindatapath);
num_trainfile = length(list_trainfile)-2;

list_valfile = dir(valdatapath);

%%
P = randperm(num_trainfile)+2 %randomely permutate the file index

%%
A = textread(strcat(traindatapath,'/',list_trainfile(P(1)).name));  
xx = P(1);
P(1)=[];
XTrain = A(:,1:end-1);
YTrain = A(:,end);
XTrain = reshape(XTrain',[size(XTrain,2),1,1,size(XTrain,1)]);

%%
XValid = [];
YValid = [];
for k = 3:numel(list_valfile)
   B =  textread(strcat(valdatapath,'/',list_valfile(k).name)); 
   XValid = [XValid;B(:,1:end-1)];
   YValid = [YValid;B(:,end)]; 
end

XValid = reshape(XValid',[size(XValid,2),1,1,size(XValid,1)]);

%% First epoch
%% First run
model =  adhocSequential();
miniBatchSize  = 6;
validationFrequency = floor(numel(YTrain)/miniBatchSize);
options = trainingOptions('adam', ...
    'MiniBatchSize',miniBatchSize, ...
    'MaxEpochs',1, ...
    'InitialLearnRate',0.0002, ...
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropFactor',0.1, ...
    'LearnRateDropPeriod',20, ...
    'Shuffle','once', ...
    'ValidationData',{XValid,YValid}, ...
    'ValidationFrequency',validationFrequency, ...
    'Plots','training-progress', ...
    'Verbose',false);

net = trainNetwork(XTrain,YTrain,model,options);

%% rest of first epoch
miniBatchSize  = 6;
for l = 1:4
    P = P(randperm(numel(P)));
    
    for k = 1:1:numel(P)/3    
        %disp('Start')
        f = strcat(list_trainfile(P(3*k-2)).name,'--', ...
            list_trainfile(P(3*k-1)).name,'--', ...
            list_trainfile(P(3*k)).name);
        disp(f)
        
        A = textread(strcat(traindatapath,'/',list_trainfile(P(3*k-2)).name)); 
        B = textread(strcat(traindatapath,'/',list_trainfile(P(3*k-1)).name));
        C = textread(strcat(traindatapath,'/',list_trainfile(P(3*k)).name));

        XTrain = [A(:,1:end-1);B(:,1:end-1);C(:,1:end-1)];
        YTrain = [A(:,end);B(:,end);C(:,end)];
        XTrain = reshape(XTrain',[size(XTrain,2),1,1,size(XTrain,1)]);
        if rem(k,5)~=0
            options = trainingOptions('adam', ...
                'MiniBatchSize',miniBatchSize, ...
                'MaxEpochs',1, ...
                'InitialLearnRate',0.0002, ...
                'LearnRateSchedule','piecewise', ...
                'LearnRateDropFactor',0.1, ...
                'LearnRateDropPeriod',5, ...
                'Shuffle','once', ...
                'ValidationData',{XValid,YValid}, ...
                'ValidationFrequency',validationFrequency, ...
                'Plots','none', ...
                'Verbose',false);
        else
            options = trainingOptions('adam', ...
                'MiniBatchSize',miniBatchSize, ...
                'MaxEpochs',1, ...
                'InitialLearnRate',0.0002, ...
                'LearnRateSchedule','piecewise', ...
                'LearnRateDropFactor',0.1, ...
                'LearnRateDropPeriod',5, ...
                'Shuffle','once', ...
                'ValidationData',{XValid,YValid}, ...
                'ValidationFrequency',validationFrequency, ...
                'Plots','training-progress', ...
                'Verbose',false);
            
            disp('Progress-display')
        end    
        net = trainNetwork(XTrain,YTrain,net.Layers,options);
        %disp('END')
    end
    disp('Next epoch...')
    if l ==1
       P = [P xx]; 
    end
end

%------------------------------------------------------------------------------------------------------%
%% Validation testing
filee = list_trainfile(45).name
BB =  textread(strcat(traindatapath,'/',filee)); 
testV = BB(:,1:end-1);
testV = reshape(testV',[size(testV,2),1,1,size(testV,1)]);

% result :: 
op_1 = predict(net,testV);
op_1 = double(op_1);

figure, plot(1:numel(op_1),BB(:,end),'-r',1:numel(op_1),op_1,'-k')
%% learning rate is reduced

list_trainfile = dir(traindatapath);
num_trainfile = length(list_trainfile)-2;
P = randperm(num_trainfile)+2;
miniBatchSize  = 10;
validationFrequency = floor(numel(YTrain)/miniBatchSize);
noEpoch = 4;
for l = 1:noEpoch    
    for k = 1:1:numel(P)/3    
         P = P(randperm(numel(P)));   
        f = strcat(list_trainfile(P(3*k-2)).name,'--', ...
            list_trainfile(P(3*k-1)).name,'--', ...
            list_trainfile(P(3*k)).name);     
        
        A = textread(strcat(traindatapath,'/',list_trainfile(P(3*k-2)).name)); 
        B = textread(strcat(traindatapath,'/',list_trainfile(P(3*k-1)).name));
        C = textread(strcat(traindatapath,'/',list_trainfile(P(3*k)).name));

        XTrain = [A(:,1:end-1);B(:,1:end-1);C(:,1:end-1)];
        YTrain = [A(:,end);B(:,end);C(:,end)];
        XTrain = reshape(XTrain',[size(XTrain,2),1,1,size(XTrain,1)]);
        if rem(k,5)~=0
            options = trainingOptions('adam', ...
                'MiniBatchSize',miniBatchSize, ...
                'MaxEpochs',1, ...
                'InitialLearnRate',0.0002, ...
                'LearnRateSchedule','piecewise', ...
                'LearnRateDropFactor',0.1, ...
                'LearnRateDropPeriod',5, ...
                'Shuffle','once', ...
                'ValidationData',{XValid,YValid}, ...
                'ValidationFrequency',validationFrequency, ...
                'Plots','none', ...
                'Verbose',false);
        else
            options = trainingOptions('adam', ...
                'MiniBatchSize',miniBatchSize, ...
                'MaxEpochs',1, ...
                'InitialLearnRate',0.0002, ...
                'LearnRateSchedule','piecewise', ...
                'LearnRateDropFactor',0.1, ...
                'LearnRateDropPeriod',5, ...
                'Shuffle','once', ...
                'ValidationData',{XValid,YValid}, ...
                'ValidationFrequency',validationFrequency, ...
                'Plots','training-progress', ...
                'Verbose',false);
            
            disp('Progress-display')
        end    
        net = trainNetwork(XTrain,YTrain,net.Layers,options);
        %disp('END')
    end
    disp('Next epoch...')
  
end

%% Validation testing
filee = list_trainfile(45).name
BB =  textread(strcat(traindatapath,'/',filee)); 
testV = BB(:,1:end-1);
testV = reshape(testV',[size(testV,2),1,1,size(testV,1)]);

% result :: 
op_1 = predict(net,testV);
op_1 = double(op_1);

figure, plot(1:numel(op_1),BB(:,end),'-r',1:numel(op_1),op_1,'-k')

